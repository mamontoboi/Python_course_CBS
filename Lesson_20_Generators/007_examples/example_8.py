"""
Можна використовувати нескінченні послідовності безліччю різних способів. Одним з них є створення детектора
паліндромів. Детектор паліндромів виявляє всі послідовності букв та цифр, які є паліндромами. Це слова чи числа,
які читаються однаково вперед і назад, як «151», наприклад. Спершу визначимо числовий детектор паліндромів:
"""


def is_palindrome(num):
    # Skip single-digit inputs
    if num // 10 == 0:
        return False
    temp = num
    reversed_num = 0
    while temp != 0:
        reversed_num = (reversed_num * 10) + (temp % 10)
        temp = temp // 10
    if num == reversed_num:
        return num
    else:
        return False


"""
Функція приймає введене число, перевертає його і порівнює з оригіналом. Тепер ви можете використати генератор 
нескінченної послідовності для отримання списку, що біжить, з усіма числовими паліндромами:
"""


def infinite_sequence():
    num = 0
    while True:
        yield num
        num += 1


"""
Цей блок коду не великий та добре виглядає. Спершу задаємо змінну num й створюємо нескінченний цикл. 
Потім негайно вилучаємо num за допомогою yield у її вихідному стані (це багато в чому повторює те, що робить range()).
Після цього ми збільшуємо num на 1.

Якщо спробувати запустити цей код у тілі циклу for, то побачимо, що насправді він нескінченний:
"""

for i in infinite_sequence():
    pal = is_palindrome(i)
    if pal:
        print(pal)


"""
У консолі виводяться ті номери, які читаються однаково і вперед і назад.

Примітка: на практиці навряд чи доведеться писати свій власний нескінченний генератор послідовностей.
простою причиною є вже дуже ефективний генератор itertools.count() з модуля itertools.
"""