""" Ви можете використовувати вбудовану функцію eval() для динамічного виконання виразів із введення на основі рядка
або скомпільований код. Якщо ви передаєте в eval() рядок, то функція аналізує його, компілює у байт-код та
виконує як вираз Python.
eval(expression, globals=None, locals=None)
Параметри:
expression - рядок-вираз, який потрібно виконати. Або об'єкт коду, що повертає compile(),
globals=None - словник глобального простору, щодо якого слід виконати вираз,
locals=None - змінні локального простору, де слід виконати вираз.
Значення, що повертається: результат виконання терміну-вираження.
Функція eval() виконує рядок-вираз, переданий їй як обов'язковий аргумент і повертає результат виконання цього рядка.
Аргументами eval() є рядок-вираз expression, який потрібно виконати та необов'язкові
Globals і локальні місцеві значення. Передані на функцію світові змінні повинні бути словником dict.
Передані локальні змінні можуть бути будь-яким об'єктом, що відображає.

Якщо глобальні змінні вказані, але словник globals не містить атрибуту __builtins__ дані переданого словника
зі значеннями буде доповнено даними загального глобального простору, перед розбором висловлювання. Таким чином,
вираз матиме доступ до всіх вбудованих модулів.

Якщо локальні місцеві змінні не вказані, то використовується словник глобального простору.

Якщо обидва словники опущені, вираз виконується з глобальними та локальними значеннями у середовищі, де функція eval()
викликається. Зверніть увагу, що eval() не має доступу до вкладених областей

Функція eval() також можна використовувати для виконання коду, який повертає функція compile(). Якщо об'єкт
коду compile() зібраний в режимі exec буде повернуто None.

Функції eval() можна передавати результати функцій globals() та locals().

Якщо вам необхідно виконати динамічний код, записаний у рядок, зверніться до документації за функцією exec().

x = "print('Привіт')"
Привіт
eval(x)
"""

y = 'print("5 + 10 =", (5 + 10))'
# 5 + 10 = 15
eval(y)

s = 3
# True
print(eval('s == 3'))
# 4
print(eval('s + 1'))
# 3
print(eval('s'))
# 3test
print(eval('str(s) + "test"'))
